
/*********************************************************************************************

    This is public domain software that was developed by or for the U.S. Naval Oceanographic
    Office and/or the U.S. Army Corps of Engineers.

    This is a work of the U.S. Government. In accordance with 17 USC 105, copyright protection
    is not available for any work of the U.S. Government.

    Neither the United States Government, nor any employees of the United States Government,
    nor the author, makes any warranty, express or implied, without even the implied warranty
    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE, or assumes any liability or
    responsibility for the accuracy, completeness, or usefulness of any information,
    apparatus, product, or process disclosed, or represents that its use would not infringe
    privately-owned rights. Reference herein to any specific commercial products, process,
    or service by trade name, trademark, manufacturer, or otherwise, does not necessarily
    constitute or imply its endorsement, recommendation, or favoring by the United States
    Government. The views and opinions of authors expressed herein do not necessarily state
    or reflect those of the United States Government, and shall not be used for advertising
    or product endorsement purposes.

*********************************************************************************************/

/* normdev.c
	purpose:  produce the standard normal deviate (quantile) at p
	from http://www.johndcook.com/normal_cdf_inverse.html
	john d cook is a researcher at md anderson cancer center (sep 2009).
*/

#include <stdio.h>
#include <math.h>
#include "normdev.h"

static double RationalApproximation(double t)
{
    /* Abramowitz and Stegun formula 26.2.23. */
    /* The absolute value of the error should be less than 4.5 e-4. */
    double c[] = {2.515517, 0.802853, 0.010328};
    double d[] = {1.432788, 0.189269, 0.001308};
    return t - ((c[2]*t + c[1])*t + c[0]) / 
               (((d[2]*t + d[1])*t + d[0])*t + 1.0);
}

/******************************************************************************/
double normdev(double p)
{
	double ans;
    if (p <= 0.0 || p >= 1.0)
    {
	printf("Invalid input argument %f must be in (0, 1)\n", p);
    	/* if ( p <= 0 ) p += 1e-36;
    	if ( p >= 1 ) p -= 1e-36; */
	return 0;
    }

    /* See article above for explanation of this section.  */
    if (p < 0.5)
    {
        /* F^-1(p) = - G^-1(p) */
        ans = -RationalApproximation( sqrt(-2.0*log(p)) );
    }
    else
    {
        /* F^-1(p) = G^-1(1-p) */
        ans = RationalApproximation( sqrt(-2.0*log(1-p)) );
    }

    return (ans);
    /*return rint(ans*1.0e3)/1.0e3;*/
} /* normdev */

#if defined( _TRY_DEMO )
/*
cc -o normdev_demo normdev.c -lm -D_TRY_DEMO
*/
void demo()
{
    double p[] =
    {
        0.0000001,
        0.00001,
        0.001,
        0.05,
        0.15,
        0.25,
        0.35,
        0.45,
        0.55,
        0.65,
        0.75,
        0.85,
        0.95,
        0.999,
        0.99999,
        0.9999999
    };

    /* Exact values computed by Mathematica. */
    double exact[] =
    {
        -5.199337582187471,
        -4.264890793922602,
        -3.090232306167813,
        -1.6448536269514729,
        -1.0364333894937896,
        -0.6744897501960817,
        -0.38532046640756773,
        -0.12566134685507402,
         0.12566134685507402,
         0.38532046640756773,
         0.6744897501960817,
         1.0364333894937896,
         1.6448536269514729,
         3.090232306167813,
         4.264890793922602,
         5.199337582187471
    };

    double maxerror = 0.0;
    int i, numValues = sizeof(p)/sizeof(double);
    double computed;
    double error;

    printf("\nShow that the NormalCDFInverse function is accurate at \n");
    printf("0.05, 0.15, 0.25, ..., 0.95 and at a few extreme values.\n\n");
    printf("p, exact CDF inverse, computed CDF inverse, diff\n\n");

    for (i = 0; i < numValues; ++i)
    {
        computed = normdev(p[i]);
        error = exact[i] - computed;

	printf("%.7lf, %.7lf, %.7lf, %.7lf\n",
		p[i], exact[i], computed, error);

        if (fabs(error) > maxerror)
            maxerror = fabs(error);
    }

    printf("\nMaximum error: %.7lf\n\n", maxerror);
} /* demo */

main()
{
demo();
}
#endif


#if defined ( _TEST_NORMDEV )
/*
cc -o normdev normdev.c -lm  -D_TEST_NORMDEV
*/ 
int main( int argc, char **argv )
{
	double p=0.01;

	printf("normdev(%f) = %f\n", p, normdev(p));

	while ( 1 )
	{
		printf("enter new p:  ");
		scanf("%lf", &p);
		printf("normdev(%f) = %f\n", p, normdev(p));
	}	
	return 0;
} /* main */
#endif
